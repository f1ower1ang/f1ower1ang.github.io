<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS常见手写题</title>
    <url>/2023/04/02/JS%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本文主要对JS中常见的API以及其内部实现原理重新实现一遍，知其根本才能灵活的使用它们。</p>
</blockquote>
<span id="more"></span>

<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="解析-URL-参数为对象"><a href="#解析-URL-参数为对象" class="headerlink" title="解析 URL 参数为对象"></a>解析 URL 参数为对象</h2><p>例如，<code>http://www.xxx.com?ids=123&amp;&amp;ids=456&amp;name=jack&amp;male</code>会被转化为<code>&#123; ids: [123, 456], name: &#39;jack&#39;, male: true &#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseParam</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paramsStr = <span class="regexp">/.+\?(.+)/</span>.<span class="title function_">exec</span>(url)[<span class="number">1</span>] <span class="comment">// 将 ? 后面的字符串取出来</span></span><br><span class="line">  <span class="keyword">const</span> paramsArr = paramsStr.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>) <span class="comment">// 将字符串以 &amp; 分割后存到数组中</span></span><br><span class="line">  <span class="keyword">const</span> paramsObj = &#123;&#125;</span><br><span class="line">  <span class="comment">// 将 params 存到对象中</span></span><br><span class="line">  paramsArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/=/</span>.<span class="title function_">test</span>(param)) &#123; <span class="comment">// 处理有 value 的参数</span></span><br><span class="line">      <span class="keyword">let</span> [key, val] = param.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>) <span class="comment">// 分割 key 和 value</span></span><br><span class="line">      val = <span class="built_in">decodeURIComponent</span>(val) <span class="comment">// 解码</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(val)) val = <span class="title class_">Number</span>(val) <span class="comment">// 判断是否转为数字</span></span><br><span class="line">      <span class="keyword">if</span> (paramsObj.<span class="title function_">hasOwnProperty</span>(key)) <span class="comment">// 如果对象有 key，则添加一个值</span></span><br><span class="line">        paramsObj[key] = [].<span class="title function_">concat</span>(paramsObj[key], val)</span><br><span class="line">      <span class="keyword">else</span> <span class="comment">// 如果对象没有这个 key，创建 key 并设置值</span></span><br><span class="line">        paramsObj[key] = val</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="comment">// 处理没有 value 的参数</span></span><br><span class="line">      paramsObj[param] = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> paramsObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写instanceof方法"><a href="#手写instanceof方法" class="headerlink" title="手写instanceof方法"></a>手写instanceof方法</h2><p>Instanceof 原理就是判断当前对象的隐式原型(<code>__proto__</code>)是否等于构造函数的原型(<code>prototype</code>)，若不是则顺着原型链查找，直到为<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, constructor</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(obj), prototype = constructor.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写new操作符"><a href="#手写new操作符" class="headerlink" title="手写new操作符"></a>手写new操作符</h2><p>new操作符的原理为：创建一个空对象，并把该对象的隐式原型指向构造函数的原型对象，然后执行构造函数并通过显示绑定改变构造函数里的this指向，从而为空对象添加属性，最后判断构造函数是否返回一个对象，若是则将其作为返回值，若没有则返回新建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">constructor, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">const</span> result = constructor.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">  <span class="keyword">if</span> (result !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> result</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写Promise-all"><a href="#手写Promise-all" class="headerlink" title="手写Promise.all"></a>手写Promise.all</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseAll</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="comment">// 先判断传入的参数是否为可迭代的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;argument must be an array&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        cnt++</span><br><span class="line">        result[index] = res</span><br><span class="line">        <span class="keyword">if</span> (cnt === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写防抖函数"><a href="#手写防抖函数" class="headerlink" title="手写防抖函数"></a>手写防抖函数</h2><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer)</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">let</span> callNow = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (immedaite) callNow = !timer</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">    &#125;, wait)</span><br><span class="line">    <span class="keyword">if</span> (callNow) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写节流函数"><a href="#手写节流函数" class="headerlink" title="手写节流函数"></a>手写节流函数</h2><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= delay) &#123;</span><br><span class="line">      pre = now</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写-call、apply、bind-函数"><a href="#手写-call、apply、bind-函数" class="headerlink" title="手写 call、apply、bind 函数"></a>手写 call、apply、bind 函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context=<span class="variable language_">window</span>, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context=<span class="variable language_">window</span>, args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (args &amp;&amp; !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not array&#x27;</span>)</span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">context, ...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fNOP</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fBound</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">		<span class="comment">// 判断是否被用作构造函数</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fBound ? <span class="variable language_">this</span> : context, args1.<span class="title function_">contact</span>(args2))</span><br><span class="line">  &#125;</span><br><span class="line">  fNop.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">  fBound.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = fBound</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现Ajax请求"><a href="#实现Ajax请求" class="headerlink" title="实现Ajax请求"></a>实现Ajax请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        <span class="comment">// 1. 新建一个HTTP对象</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 2. 设置状态监听函数 </span></span><br><span class="line">        <span class="comment">// (一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件)</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">            <span class="comment">// 3. 当请求成功或失败时，改变 promise 的状态</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">            <span class="keyword">else</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置错误监听函数</span></span><br><span class="line">        xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置响应的数据类型</span></span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">        <span class="comment">// 设置请求头信息</span></span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        <span class="comment">// 发送 HTTP 请求</span></span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现深浅拷贝"><a href="#实现深浅拷贝" class="headerlink" title="实现深浅拷贝"></a>实现深浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="title function_">hasOwnProperty</span>(key)) res[key] = value[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map 用来解决循环引用问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">value, map = <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;symbol&#x27;</span>) <span class="keyword">return</span> <span class="title class_">Symbol</span>(value.<span class="property">description</span>)</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span> || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>([...value])</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>([...value])</span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(value)) <span class="keyword">return</span> map.<span class="title function_">get</span>(value)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) ? [] : &#123;&#125;</span><br><span class="line">    map.<span class="title function_">set</span>(value, res)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="title function_">hasOwnProperty</span>(key))</span><br><span class="line">            res[key] = <span class="title function_">deepClone</span>(value[key], map)</span><br><span class="line">    <span class="comment">// Symbol key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> value.<span class="title function_">getOwnPropertySymbols</span>(value)) &#123;</span><br><span class="line">        res[key] = <span class="title function_">deepClone</span>(value[key], map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fNOP</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第2、3、8行可由 Child.prototype = Object.create(Parent.prototype) 替代</span></span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> prototype) &#123;</span><br><span class="line">        <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>[key] = prototype[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数自动柯理化"><a href="#函数自动柯理化" class="headerlink" title="函数自动柯理化"></a>函数自动柯理化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> argLen = fn.<span class="property">length</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &lt; argLen)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(args2))</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curried</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">currying</span>(add)</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h1 id="EventMitter"><a href="#EventMitter" class="headerlink" title="EventMitter"></a>EventMitter</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  private <span class="attr">_events</span>: <span class="title class_">Record</span>&lt;string, <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">evt: string, ...args: any[]</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fns = [...<span class="variable language_">this</span>.<span class="property">_events</span>[evt]];</span><br><span class="line">    fns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">evt: string, fn: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;The evet-triggered callback must be a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] = [fn];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">evt: string, fn: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">execFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(evt, execFn);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(evt, execFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">evt: string, fn?: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cb;</span><br><span class="line">    <span class="keyword">const</span> cbLen = <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbLen; i++) &#123;</span><br><span class="line">      cb = <span class="variable language_">this</span>.<span class="property">_events</span>[evt][i];</span><br><span class="line">      <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeAllListeners</span>(<span class="params">evt?: string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (evt) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="数组的乱序输出"><a href="#数组的乱序输出" class="headerlink" title="数组的乱序输出"></a>数组的乱序输出</h2><p>主要的实现思路就是：</p>
<ul>
<li>取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。</li>
<li>第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换</li>
<li>按照上面的规律执行，直到遍历完成</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (n - i - <span class="number">1</span>) + i</span><br><span class="line">        [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据扁平化"><a href="#数据扁平化" class="headerlink" title="数据扁平化"></a>数据扁平化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])</span><br><span class="line">            res.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce 函数迭代</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatten</span>(cur) : cur)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 flat   arr.flat(Infinity)</span></span><br><span class="line"><span class="comment">// 正则和JSON方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr)</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    str = <span class="string">&#x27;[&#x27;</span> + str + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="列表转成树形结构"><a href="#列表转成树形结构" class="headerlink" title="列表转成树形结构"></a>列表转成树形结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换前：</span></span><br><span class="line">source = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;body&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;div&#x27;</span></span><br><span class="line">          &#125;]</span><br><span class="line"><span class="comment">// 转换为: </span></span><br><span class="line">tree = [&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">pid</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;div&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listToTree</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        map.<span class="title function_">set</span>(item.<span class="property">id</span>, item)</span><br><span class="line">    &#125;)</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">has</span>(item.<span class="property">pid</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> parent = map.<span class="title function_">get</span>(item.<span class="property">pid</span>)</span><br><span class="line">            (parent.<span class="property">children</span> || parent.<span class="property">children</span> = []).<span class="title function_">push</span>(item)</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树形结构转成列表"><a href="#树形结构转成列表" class="headerlink" title="树形结构转成列表"></a>树形结构转成列表</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treeToList</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    </span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">children</span> &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item.<span class="property">children</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">concat</span>(<span class="title function_">treeToList</span>(item.<span class="property">children</span>))</span><br><span class="line">            <span class="keyword">delete</span> item.<span class="property">children</span></span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字每千分位用逗号隔开"><a href="#数字每千分位用逗号隔开" class="headerlink" title="数字每千分位用逗号隔开"></a>数字每千分位用逗号隔开</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">format</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> str = num.<span class="title function_">toString</span>(), float = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        [str, float] = str.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=((\d&#123;3&#125;)+)$)/g</span>, <span class="string">&#x27;$1,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (float.<span class="property">length</span>) <span class="keyword">return</span> str + <span class="string">&#x27;.&#x27;</span> + float</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h1><h2 id="循环打印红黄绿"><a href="#循环打印红黄绿" class="headerlink" title="循环打印红黄绿"></a>循环打印红黄绿</h2><p><strong>红灯 3s 亮一次，绿灯 2s 亮一次，黄灯 1s 亮一次，交替重复</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params">timer, light</span>) =&gt; </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (light === <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">red</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (light === <span class="string">&#x27;green&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">green</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (light === <span class="string">&#x27;yellow&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">yellow</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, timer)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">step</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">task</span>(<span class="number">3000</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">task</span>(<span class="number">2000</span>, <span class="string">&#x27;green&#x27;</span>))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">task</span>(<span class="number">1000</span>, <span class="string">&#x27;yellow&#x27;</span>))</span><br><span class="line">        .<span class="title function_">then</span>(step)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">step</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">taskRunner</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">3000</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">2000</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">1000</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    <span class="title function_">taskRunner</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">taskRunner</span>()</span><br></pre></td></tr></table></figure>

<h2 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">callback</span> = <span class="keyword">function</span>(<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">callback</span></span><br><span class="line">        &#125;</span><br><span class="line">        src += <span class="string">&#x27;callback=callback&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = src</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS手写</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3.2 响应式原理——手写简易版本</title>
    <url>/2023/03/25/Vue3.2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在进行正式阅读Vue3.2 响应式源码前，先来了解响应式的核心原理，并自己实现一个基础的响应式数据系统</p>
</blockquote>
<span id="more"></span>

<h1 id="响应式数据前瞻"><a href="#响应式数据前瞻" class="headerlink" title="响应式数据前瞻"></a>响应式数据前瞻</h1><h2 id="不智能的数据"><a href="#不智能的数据" class="headerlink" title="不智能的数据"></a>不智能的数据</h2><p>我们正常编写js代码的时候，变量值的改变不会触发相关视图依赖更新，如下面代码所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reactive = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = reactive.<span class="property">a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">effect</span>()</span><br><span class="line">reactive.<span class="property">a</span> = <span class="string">&#x27;edited&#x27;</span> <span class="comment">// 变量修改，不会触发effect函数执行，需要手动调用</span></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 手动调用，更新视图</span></span><br></pre></td></tr></table></figure>
<h1 id="Vue中智能的数据"><a href="#Vue中智能的数据" class="headerlink" title="Vue中智能的数据"></a>Vue中智能的数据</h1><p>在Vue编写的数据，当数据变化时，相关的视图也会实时更新，官方称之为响应式数据，实现响应式数据的核心就是<strong>数据劫持</strong>和<strong>发布订阅</strong>。一句话概括就是通过劫持数据的获取（getter）操作来收集依赖，劫持数据的设置（setter）操作来触发依赖，其中收集依赖和触发依赖就是发布订阅模式的核心思想。</p>
<p>在Vue2中，数据劫持是通过<code>Object.defineProperty</code>来完成对象属性的获取（getter）和设置（setter）操作；Vue3则是通过<code>Proxy + Reflect</code>来完成对象属性相关劫持操作。下面可以使用<code>Proxy</code>来简单实现一个响应式数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前被激活的依赖</span></span><br><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  activeEffect = fn</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">fn</span>()</span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存依赖的对应关系 target -&gt; key -&gt; effect</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 当前没有被激活的依赖，直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 先获取 target 映射的依赖收集器</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  <span class="comment">// 再获取 key 映射的依赖，里面用于存放依赖</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!deps) depsMap.<span class="title function_">set</span>(key, (deps = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  <span class="keyword">if</span> (!deps.<span class="title function_">has</span>(activeEffect)) deps.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key, newValue, oldValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 值没变化直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (newValue === oldValue) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!deps) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> effects = [...deps]</span><br><span class="line">  effects.<span class="title function_">forEach</span>(<span class="function"><span class="params">effect</span> =&gt;</span> <span class="title function_">effect</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把普通对象变成响应式对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">originData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reactiveData = <span class="keyword">new</span> <span class="title class_">Proxy</span>(originData, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 收集当前激活的依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="comment">// 触发对应的依赖</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key, value, oldValue)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> reactiveData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个响应式对象</span></span><br><span class="line"><span class="keyword">const</span> originData = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;f1ower1ang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reactiveData = <span class="title function_">reactive</span>(originData)</span><br><span class="line"><span class="comment">// f1ower1ang-18</span></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;reactiveData.name&#125;</span>-<span class="subst">$&#123;reactiveData.age&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// edited-f1ower1ang-18</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  reactiveData.<span class="property">name</span> = <span class="string">&#x27;edited-f1ower1ang&#x27;</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>可以把上面的内容复制到浏览器控制台中运行一下，可以发现body元素起始内容为<code>f1ower1ang-18</code>，过了一秒后会自动更新为<code>edited-f1ower1ang-18</code>。这就是响应式数据的魅力所在，不需要我们修改完数据后手动操作去触发视图更新。</p>
<p>上述代码中，<code>WeakMap</code>和<code>Proxy</code>就是发布订阅模式的核心，其中<code>WeakMap</code>负责收集事件的订阅，<code>Proxy</code>中的getter和setter负责订阅事件和触发事件执行，这里的事件就是指传入effect中的函数参数，在Vue中则是和挂载组件以及组件更新相关的函数。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文从不具备响应式的数据作为切入点，到手写一个简单的响应式数据系统，为接下来的源码阅读打基础，下节则直接阅读源码，彻底掌握Vue3的响应式数据。</p>
]]></content>
      <categories>
        <category>Vue源码</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack设计理念及有关实现</title>
    <url>/2023/04/04/Webpack%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E5%8F%8A%E6%9C%89%E5%85%B3%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>前端工程化中，构建工具是核心，虽然目前已经有许多构建工具如vite、esbuild等，但由于webpack周边完善的生态，它仍然是一个主流的JS打包工具。为了更好的了解webpack，本文将依据webpack构建流程来实现一个简易的demo。</p>
</blockquote>
<span id="more"></span>

<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><blockquote>
<p>初始化项目</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm init <span class="comment">// 使用pnpm初始化一个项目</span></span><br><span class="line">pnpm install webpack <span class="comment">// 安装依赖</span></span><br></pre></td></tr></table></figure>

<p>初始化完依赖后，可以按照以下目录结构添加文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── package-lock.<span class="property">json</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── webpack.<span class="property">config</span>.<span class="property">js</span> #配置文件</span><br><span class="line">├── <span class="keyword">debugger</span>.<span class="property">js</span> #测试文件</span><br><span class="line">└── src # 源码目录</span><br><span class="line">     |── index.<span class="property">js</span></span><br><span class="line">     |── name.<span class="property">js</span></span><br><span class="line">     └── age.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义plugin</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebpackRunPlugin</span> &#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">tap</span>(<span class="string">&#x27;WebpackRunPlugin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始编译&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebpackDonePlugin</span> &#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">tap</span>(<span class="string">&#x27;WebpackDonePlugin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束编译&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义loader</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader1</span> = (<span class="params">source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> source + <span class="string">&#x27;//给你的代码加点注释：loader1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader2</span> = (<span class="params">source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> source + <span class="string">&#x27;//给你的代码加点注释：loader2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 防止代码被压缩</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">// 使用自定义loader</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [loader1, loader2]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="comment">// 使用自定义插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WebpackRunPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WebpackDonePlugin</span>()</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 打包文件输出路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>src&#x2F;index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="built_in">require</span>(<span class="string">&#x27;./name&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> age = <span class="built_in">require</span>(<span class="string">&#x27;./age&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;entry文件打印作者信息&#x27;</span>, name, age)</span><br></pre></td></tr></table></figure>

<p><strong>src&#x2F;name.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;f1ower1ang&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>src&#x2F;age.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;88&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>依赖关系</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/WX20230404.png" alt="WX20230404"></p>
<p>Wepback是一个函数，返回值是Compiler对象，该函数主要完成两件事情：初始化Compiler对象、注册插件。随后调用compiler的run方法开始编译，该方法接收一个回调，用来查看编译过程中的错误信息或编译信息。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230404215023692.png" alt="image-20230404215023692"></p>
<p><strong>debugger.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; webpack &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpackOptions = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(webpackOptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始编译</span></span><br><span class="line">compiler.<span class="title function_">run</span>(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        stats.<span class="title function_">toJson</span>(&#123;</span><br><span class="line">            <span class="attr">assets</span>: <span class="literal">true</span>, <span class="comment">// 打印本次编译产出的资源</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="literal">true</span>, <span class="comment">// 打印本次编译产出的代码块</span></span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">true</span> <span class="comment">// 打印本次编译产出的模块</span></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行debugger文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node ./debugger.js</span><br></pre></td></tr></table></figure>

<p>得到打包后的文件 <strong>dist&#x2F;main.js</strong> (已对原文件内容进行美化)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> modules = &#123;</span><br><span class="line">    <span class="string">&#x27;./src/name.js&#x27;</span>: <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;f1ower1ang&#x27;</span> <span class="comment">//给你的代码加点注释：loader2//给你的代码加点注释：loader1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;./src/age.js&#x27;</span>: <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;88&#x27;</span> <span class="comment">//给你的代码加点注释：loader2//给你的代码加点注释：loader1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cachedModule = modules[moduleId]</span><br><span class="line">    <span class="keyword">if</span> (cachedModule) <span class="keyword">return</span> cachedModule.<span class="property">exports</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = (cache[moduleId] = &#123;</span><br><span class="line">      <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    modules[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, <span class="built_in">require</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">require</span>(<span class="string">&#x27;./src/name.js&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> age = <span class="built_in">require</span>(<span class="string">&#x27;./src/age.js&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;entry文件打印作者信息&#x27;</span>, name, age);</span><br><span class="line">  <span class="comment">//给你的代码加点注释：loader2//给你的代码加点注释：loader1</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h1><p>在正式实现相关核心流程之前，先重温一下Webpack的构建流程，后续也是基于该流程来完成核心流程中的代码实现：</p>
<ol>
<li><p><strong>初始化参数</strong>：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</p>
</li>
<li><p><strong>开始编译</strong>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。</p>
<ul>
<li>插件系统使得Webpack的扩展性强，是一种可插拔式的设计。它本质上是一种事件流的机制，到了固定时间节点就广播特定的事件，核心是发布订阅机制，基于 tapable。</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230404221855938.png" alt="image-20230404221855938"></p>
</li>
<li><p><strong>确定入口</strong>：根据配置中的 entry 找出所有的入口文件。</p>
</li>
<li><p><strong>编译模块</strong>：从入口文件出发,调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</p>
<ul>
<li>本质上Webpack只能识别js文件，对于其他格式的文件需要将其转换为js代码才能被执行，而这个转换过程就交给loader来完成，换言之，loader充当者一个翻译官的角色。</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230404220330561.png" alt="image-20230404220330561"></p>
</li>
<li><p><strong>完成模块编译</strong>：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</p>
</li>
<li><p><strong>输出资源</strong>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。</p>
</li>
<li><p><strong>输出完成</strong>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</p>
</li>
</ol>
<h1 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h1><p>Webpack构建流程可以简单概括为以下几个阶段：</p>
<ul>
<li><strong>初始化</strong>：启动构建，读取与合并配置参数，加载Plugin，实例化Compiler</li>
<li><strong>编译</strong>：从entry出发，针对每个module串行调用对应的loader去翻译文件内容，再递归处module依赖的module，形成构建图。</li>
<li><strong>输出</strong>：将编译后的module组合成chunk，最终将chunk转换成文件，输出到本地硬盘中。</li>
</ul>
<p>这其中编译阶段是最复杂的，另外还需考虑一个场景：watch mode（当文件变化时，重新进行编译），因此将编译阶段（即下文中的<code>compilation</code>）单独解耦出来。</p>
<p>在Webpack源码中，<code>compiler</code>代表上述说的三个阶段，在它上面挂载着各种生命周期函数，而<code>compilation</code>专门负责编译相关的工作。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/6751335793864999b09abea4feb05b77_tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0_result.png" alt="6751335793864999b09abea4feb05b77_tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0_result"></p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="搭建结构，读取配置参数，挂载配置文件中的插件"><a href="#搭建结构，读取配置参数，挂载配置文件中的插件" class="headerlink" title="搭建结构，读取配置参数，挂载配置文件中的插件"></a>搭建结构，读取配置参数，挂载配置文件中的插件</h2><p>webpack本质是一个函数，传入配置信息，并初始化Compiler实例，挂载plugin。随后调用compiler实例上的run方法进入编译阶段，修改webpack引用模块。</p>
<p><strong>.&#x2F;webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebpackRunPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">tap</span>(<span class="string">&#x27;WebpackRunPlugin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始编译&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebpackDonePlugin</span> &#123;</span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">tap</span>(<span class="string">&#x27;WebpackDonePlugin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束编译&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">WebpackRunPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">WebpackDonePlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>.&#x2F;debugger.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; webpack &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.js&#x27;</span>)</span><br><span class="line"><span class="comment">// const &#123; webpack &#125; = require(&#x27;webpack&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> webpackOptions = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(webpackOptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始编译</span></span><br><span class="line">compiler.<span class="title function_">run</span>(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        stats.<span class="title function_">toJson</span>(&#123;</span><br><span class="line">            <span class="attr">assets</span>: <span class="literal">true</span>, <span class="comment">// 打印本次编译产出的资源</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="literal">true</span>, <span class="comment">// 打印本次编译产出的代码块</span></span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">true</span> <span class="comment">// 打印本次编译产出的模块</span></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>.&#x2F;webpack.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SyncHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">webpackOptions</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = webpackOptions</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">      <span class="attr">run</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(), <span class="comment">// 会在编译刚开始的时候触发此run钩子</span></span><br><span class="line">      <span class="attr">done</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>() <span class="comment">// 会在编译结束的时候触发此done钩子</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">callback</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">webpack</span>(<span class="params">webpackOptions</span>) &#123;</span><br><span class="line">  <span class="comment">// 实例化Compiler</span></span><br><span class="line">  <span class="keyword">const</span> compiler = <span class="keyword">new</span> <span class="title class_">Compiler</span>(webpackOptions)</span><br><span class="line">  <span class="comment">// 挂载plugins</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> webpackOptions.<span class="property">plugins</span>)</span><br><span class="line">    plugin.<span class="title function_">apply</span>(compiler)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> compiler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行run方法开始执行编译"><a href="#执行run方法开始执行编译" class="headerlink" title="执行run方法开始执行编译"></a>执行run方法开始执行编译</h2><p>在正式编译之前需要调用compiler中的钩子函数（run和done），run用来通知插件要启动编译，done则通知插件编译完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="comment">//省略其他</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// Webpack只有一个compiler，但每次编译都会生成新的compilation</span></span><br><span class="line">    <span class="comment">// 这样做的目的是考虑到watch模式，它会在compiler启动的时候开始编译，然后监听依赖文件的变化</span></span><br><span class="line">    <span class="comment">// 文件每变化一次就生成新的compilation，表示最后编译的结果</span></span><br><span class="line">    <span class="keyword">const</span> compilation = <span class="keyword">new</span> <span class="title class_">Compilation</span>(<span class="variable language_">this</span>.<span class="property">options</span>)</span><br><span class="line">    compilation.<span class="title function_">build</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">run</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">call</span>() <span class="comment">// 触发run钩子函数，通知相关插件开始编译</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onCompiled</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">call</span>() <span class="comment">// 当编译成功后触发done钩子函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compiled</span>(onCompiled) <span class="comment">// 开始编译，编译成功后调用onCompiled</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上文说到要将每次的编译操作解耦出来，这里单独定义Compilation类，完成有关编译相关的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">webpackOptions</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = webpackOptions</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modules</span> = [] <span class="comment">// 本次编译产出的所有模块</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunks</span> = [] <span class="comment">// 本次编译产出的所有代码块（由入口模块和依赖的模块打包在一起）</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assets</span> = &#123;&#125; <span class="comment">// 本次编译产出的资源文件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fileDependences</span> = [] <span class="comment">// 本次编译依赖的文件模块，主要为后续监听文件内容变化服务</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里开始执行编译工作，编译成功后调用callback</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据配置中的entry找到所有项目入口"><a href="#根据配置中的entry找到所有项目入口" class="headerlink" title="根据配置中的entry找到所有项目入口"></a>根据配置中的<code>entry</code>找到所有项目入口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> entry = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">entry</span> === <span class="string">&#x27;string&#x27;</span>) </span><br><span class="line">      <span class="comment">// 标准化entry &#x27;./src/index.js&#x27; =&gt; &#123; main: &#x27;./src/index.js&#x27; &#125;</span></span><br><span class="line">      entry.<span class="property">main</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">entry</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      entry = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">entry</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> entryName <span class="keyword">in</span> entry) &#123;</span><br><span class="line">      <span class="comment">// 获取entry的绝对路径</span></span><br><span class="line">      <span class="keyword">const</span> entryFilePath = path.<span class="property">posix</span>.<span class="title function_">join</span>(baseDir, entry[entryName])</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileDependences</span>.<span class="title function_">push</span>(entryFilePath)</span><br><span class="line">      <span class="comment">// 构建入口模块</span></span><br><span class="line">      <span class="keyword">const</span> entryModule = <span class="variable language_">this</span>.<span class="title function_">buildModule</span>(entryName, entryFilePath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从入口文件出发，调用配置的loader"><a href="#从入口文件出发，调用配置的loader" class="headerlink" title="从入口文件出发，调用配置的loader"></a>从入口文件出发，调用配置的<code>loader</code></h2><p>loader主要用来翻译模块内容，其本质就是一个函数，串行接收上一个loader返回的内容再将其进行处理交给下一个loader进一步处理，最终得到想要的内容。</p>
<p>这里写两个自定义的loader配置到<strong>webpack.config.js</strong>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loader1</span> = (<span class="params">source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> source + <span class="string">&#x27;//给你的代码加点注释：loader1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader2</span> = (<span class="params">source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> source + <span class="string">&#x27;//给你的代码加点注释：loader2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [loader1, loader2]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一步骤从入口文件出发，找到与之匹配的loader对源代码进行翻译和替换。</p>
<p>主要有三个要点：</p>
<ul>
<li>把入口文件添加到<code>dependences</code>数组中，记录此次编译依赖的模块</li>
<li>得到入口模块的<code>module</code>对象，里面记录着路径、源代码、依赖模块等</li>
<li>将生成的入口模块添加到<code>modules</code>数组中</li>
</ul>
<blockquote>
<p>把入口文件添加到<code>dependences</code>数组中，记录此次编译依赖的模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toUnixPath</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> baseDir = <span class="title function_">toUnixPath</span>(process.<span class="title function_">cwd</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> entryName <span class="keyword">in</span> entry) &#123;</span><br><span class="line">      <span class="comment">// 获取entry的绝对路径</span></span><br><span class="line">      <span class="keyword">const</span> entryFilePath = path.<span class="property">posix</span>.<span class="title function_">join</span>(baseDir, entry[entryName])</span><br><span class="line">      <span class="comment">// 记录</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileDependences</span>.<span class="title function_">push</span>(entryFilePath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>得到入口模块的<code>module</code>对象，里面记录着路径、源代码、依赖模块等</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">buildModule</span>(<span class="params">name, modulePath</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> sourceCode = fs.<span class="title function_">readFileSync</span>(modulePath)</span><br><span class="line">      <span class="comment">// 以模块路径相对于当前文件夹作的路径作为模块id</span></span><br><span class="line">      <span class="keyword">let</span> moduleId = <span class="string">&#x27;./&#x27;</span> + path.<span class="property">posix</span>.<span class="title function_">relative</span>(baseDir, modulePath)</span><br><span class="line">      <span class="comment">// 创建模块对象</span></span><br><span class="line">      <span class="keyword">const</span> moudle = &#123;</span><br><span class="line">        <span class="attr">id</span>: moduleId,</span><br><span class="line">        <span class="attr">names</span>: [name], <span class="comment">// 表示当前模块从属于哪些chunk</span></span><br><span class="line">        <span class="attr">_source</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">dependences</span>: [] <span class="comment">// 该模块依赖的模块</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取模块依赖的loader</span></span><br><span class="line">      <span class="keyword">const</span> loaders = []</span><br><span class="line">      <span class="keyword">const</span> &#123; rules &#125; = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">module</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> rule <span class="keyword">of</span> rules) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rule.<span class="property">test</span>.<span class="title function_">test</span>(modulePath))</span><br><span class="line">          loaders.<span class="title function_">push</span>(...rule.<span class="property">use</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 调用loader对源代码进行翻译转换，loader调用顺序为从右向左</span></span><br><span class="line">      sourceCode = loaders.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">code, loader</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">loader</span>(code)</span><br><span class="line">      &#125;, sourceCode)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> entryName <span class="keyword">in</span> entry) &#123;</span><br><span class="line">      <span class="comment">// 获取entry的绝对路径</span></span><br><span class="line">      <span class="keyword">const</span> entryFilePath = path.<span class="property">posix</span>.<span class="title function_">join</span>(baseDir, entry[entryName])</span><br><span class="line">      <span class="comment">// 记录</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileDependences</span>.<span class="title function_">push</span>(entryFilePath)</span><br><span class="line">      <span class="comment">// 构建入口模块</span></span><br><span class="line">      <span class="keyword">const</span> entryModule = <span class="variable language_">this</span>.<span class="title function_">buildModule</span>(entryName, entryFilePath)</span><br><span class="line">      <span class="comment">// 将入口模块保存至modules数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">push</span>(entryModule)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="找出当前模块依赖的模块，再对依赖模块进行处理"><a href="#找出当前模块依赖的模块，再对依赖模块进行处理" class="headerlink" title="找出当前模块依赖的模块，再对依赖模块进行处理"></a>找出当前模块依赖的模块，再对依赖模块进行处理</h2><p>当前这个步骤是整个流程中最为复杂的部分，我们可以将其拆分为以下步骤方便理解：</p>
<ul>
<li>先将源码转化为<strong>AST</strong></li>
<li>在<code>AST</code>中查找<code>require</code>语句</li>
<li><code>require</code>语句的参数就是依赖模块的路径，与之对应的绝对路径添加至<code>this.fileDependences</code>中</li>
<li>生成依赖模块的<code>模块id</code></li>
<li>修改<code>require</code>语句的参数，将其改为<code>模块id</code></li>
<li>将依赖模块的信息添加到<code>module.dependences</code>数组中</li>
<li>生成新代码，并将其保存至<code>module._source</code>中</li>
<li>对依赖模块遍历，递归处理依赖的模块（<code>module.dependences</code>）</li>
<li>将上一步函数的返回值得到依赖模块的<code>module对象</code>添加到<code>this.modules</code>数组中</li>
<li>等所有依赖模块处理完成后，返回入口模块的<code>module对象</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&#x27;@babel/types&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&#x27;@babel/generator&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).<span class="property">default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tryExtensions</span>(<span class="params">filePath, extension</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(filePath)) <span class="keyword">return</span> filePath</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; extensions.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> path = filePath + extensions[i]</span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(path)) <span class="keyword">return</span> path</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`无法找到<span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  <span class="title function_">buildModule</span>(<span class="params">name, modulePath</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 将源码转为AST</span></span><br><span class="line">    <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(sourceCode, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">    <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">      <span class="title class_">CallExpression</span>: <span class="function">(<span class="params">nodePath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; node &#125; = nodePath</span><br><span class="line">        <span class="comment">// 在AST中查找require语句</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">callee</span>.<span class="property">name</span> === <span class="string">&#x27;require&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// 获取依赖模块名</span></span><br><span class="line">          <span class="keyword">const</span> depModuleName = node.<span class="property">arguments</span>[<span class="number">0</span>].<span class="property">value</span></span><br><span class="line">          <span class="comment">// 获取入口模块所处文件目录</span></span><br><span class="line">          <span class="keyword">const</span> dirname = path.<span class="property">posix</span>.<span class="title function_">dirname</span>(modulePath)</span><br><span class="line">          <span class="comment">// 得到依赖模块的绝对路径</span></span><br><span class="line">          <span class="keyword">let</span> depModulePath = path.<span class="property">posix</span>.<span class="title function_">join</span>(dirname, depModuleName)</span><br><span class="line">          <span class="comment">// 由于依赖模块名可能会省略文件后缀，因此需依次在文件系统中查找是否存在对应文件后缀的文件</span></span><br><span class="line">          <span class="keyword">const</span> extensions = <span class="variable language_">this</span>.<span class="property">options</span>?.<span class="property">resolve</span>?.<span class="property">extension</span> || [<span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">          depModulePath = <span class="title function_">tryExtensions</span>(depModulePath, extensions)</span><br><span class="line">          <span class="comment">// 统一将baseDir的相对路径作为模块id</span></span><br><span class="line">          <span class="keyword">const</span> depModuleId = <span class="string">&#x27;./&#x27;</span> + path.<span class="property">posix</span>.<span class="title function_">relative</span>(baseDir, depModulePath)</span><br><span class="line">          <span class="comment">// 把require语句参数改为模块id</span></span><br><span class="line">          node.<span class="property">arguments</span> = [types.<span class="title function_">stringLiteral</span>(depModuleId)]</span><br><span class="line">          <span class="comment">// 将依赖模块信息保存至依赖数组中</span></span><br><span class="line">          <span class="variable language_">module</span>.<span class="property">dependences</span>.<span class="title function_">push</span>(&#123; depModulePath, depModuleId &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 将修改后的AST转为源码并保存起来</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = <span class="title function_">generator</span>(ast)</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">_source</span> = code</span><br><span class="line">    <span class="comment">// 依次遍历依赖模块，对其递归处理</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">dependences</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; depModuleId, depModulePath &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> existModule = <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">find</span>(<span class="function"><span class="params">module</span> =&gt;</span> <span class="variable language_">module</span>.<span class="property">id</span> === depModuleId)</span><br><span class="line">      <span class="keyword">if</span> (existModule) <span class="comment">// modules数组中已经存在当前模块，只需将entryName加入names数组中</span></span><br><span class="line">        existModule.<span class="property">names</span>.<span class="title function_">push</span>(name)</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">       	<span class="keyword">const</span> depModule = <span class="variable language_">this</span>.<span class="title function_">buildModule</span>(name, depModlePath)</span><br><span class="line">        depModule.<span class="property">names</span>.<span class="title function_">push</span>(name)</span><br><span class="line">        <span class="comment">// 将依赖模块添加至modules数组中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">push</span>(depModule)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 处理完成入口模块，将其返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>至此，对于模块编译阶段的核心部分已揭露完成，可以运行查看有关编译结果</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230405201355183.png" alt="image-20230405201355183"></p>
<p>以上为<code>entryModule</code>的输出，由于配置文件中只有一个入口，因此只生成一个<code>entryModule</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230405202127931.png" alt="image-20230405202127931"></p>
<p>以上为<code>this.modules</code>的输出，可以看出能够收集入口模块的依赖模块。</p>
<h2 id="将入口模块及其依赖的模块组合成代码块chunk"><a href="#将入口模块及其依赖的模块组合成代码块chunk" class="headerlink" title="将入口模块及其依赖的模块组合成代码块chunk"></a>将入口模块及其依赖的模块组合成代码块<code>chunk</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略其他</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> entryName <span class="keyword">in</span> entry) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">const</span> entryModule = <span class="variable language_">this</span>.<span class="title function_">buildModule</span>(entryName, entryFilePath)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">push</span>(entryModule)</span><br><span class="line">      <span class="comment">// 当前入口模块已处理完，生成一个chunk</span></span><br><span class="line">      <span class="keyword">const</span> chunk = &#123;</span><br><span class="line">        entryModule,</span><br><span class="line">        <span class="attr">name</span>: entryName,</span><br><span class="line">        <span class="comment">// 找出当前entry所有依赖的module</span></span><br><span class="line">        <span class="attr">modules</span>: <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">module</span> =&gt;</span> <span class="variable language_">module</span>.<span class="property">names</span>.<span class="title function_">includes</span>(entryName))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">chunks</span>.<span class="title function_">push</span>(chunk)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>this.chunks</code>的输出内容</p>
<img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230405205011305.png" alt="image-20230405205011305" style="zoom:80%;" />

<h2 id="把各个代码块chunk转换成待输出文件的内容（this-assets）"><a href="#把各个代码块chunk转换成待输出文件的内容（this-assets）" class="headerlink" title="把各个代码块chunk转换成待输出文件的内容（this.assets）"></a>把各个代码块<code>chunk</code>转换成待输出文件的内容（<code>this.assets</code>）</h2><p>这一步需要结合配置项中的<code>output.filename</code>去生成输出文件的文件名，同时还需生成运行时代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSource</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  (() =&gt; &#123;</span></span><br><span class="line"><span class="string">  var modules = &#123;</span></span><br><span class="line"><span class="string">  	<span class="subst">$&#123;chunk.modules.map(<span class="variable language_">module</span> =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  		&quot;$(module.id)&quot;: (module) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  			<span class="subst">$&#123;<span class="variable language_">module</span>._source&#125;</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  	`</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">  var cache = &#123;&#125;;</span></span><br><span class="line"><span class="string">  function require(moduleId) &#123;</span></span><br><span class="line"><span class="string">  	var cachedModule = cache[moduleId];</span></span><br><span class="line"><span class="string">  	if (cachedModule) return cachedModule.exports;</span></span><br><span class="line"><span class="string">  	var module = (cache[moduleId] = &#123; exports: &#123;&#125; &#125;);</span></span><br><span class="line"><span class="string">  	modules[moduleId](module, module.exports, require);</span></span><br><span class="line"><span class="string">  	return module.exports;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;chunk.entryModule._source&#125;</span></span></span><br><span class="line"><span class="string">  &#125;)();</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compilation</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  <span class="title function_">build</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> filename = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">output</span>.<span class="property">filename</span>.<span class="title function_">replace</span>(<span class="string">&#x27;[name]&#x27;</span>, chunk.<span class="property">name</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">assets</span>[filename] = <span class="title function_">getSource</span>(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">callback</span>(</span><br><span class="line">    	<span class="literal">null</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">chunks</span>: <span class="variable language_">this</span>.<span class="property">chunks</span>,</span><br><span class="line">        <span class="attr">modules</span>: <span class="variable language_">this</span>.<span class="property">modules</span>,</span><br><span class="line">        <span class="attr">assets</span>: <span class="variable language_">this</span>.<span class="property">assets</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileDependences</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>this.assets</code>的输出结果为对象，其中属性为文件名，值为对应的文件内容</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/f1ower1ang/blogPicture@master/images/image-20230405205251011.png" alt="image-20230405205251011"></p>
<h2 id="确定好输出内容后，将文件内容写入文件系统"><a href="#确定好输出内容后，将文件内容写入文件系统" class="headerlink" title="确定好输出内容后，将文件内容写入文件系统"></a>确定好输出内容后，将文件内容写入文件系统</h2><p>这一步只需根据配置项的<code>output.path</code>，将<code>this.assets</code>中的内容写入到相应文件中，最终就可以得到打包后的文件内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="comment">// 省略其他</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">call</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onCompiled</span> = (<span class="params">err, stats, fileDependences</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 将输出内容写入到文件系统中</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">in</span> stats.<span class="property">assets</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">output</span>.<span class="property">path</span>, filename)</span><br><span class="line">        fs.<span class="title function_">writeFileSync</span>(filePath, stats.<span class="property">assets</span>[filename], <span class="string">&#x27;uft-8&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>(err, &#123;</span><br><span class="line">        <span class="attr">toJson</span>: <span class="function">() =&gt;</span> stats</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">call</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(onCompiled)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现watch模式"><a href="#实现watch模式" class="headerlink" title="实现watch模式"></a>实现watch模式</h1><p>在结构设计时提过，将编译过程单独解耦出来的原因之一就是要监听依赖模块文件的变化，当文件变化时重新执行编译。</p>
<p>这里的思路就是对<code>this.fileDependences</code>数组中的文件进行监听，当文件发生变化时，重新执行<code>compile</code>函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onCompiled</span> = (<span class="params">err, stats, fileDependences</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      fileDependences.<span class="title function_">forEach</span>(<span class="function"><span class="params">fileDependence</span> =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">watch</span>(fileDependence, <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">compile</span>(onCompiled))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这也就能明白单独解耦出<code>Compilation</code>的作用了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文从Webpack的基本使用及构建流程出发，实现了一个简易版本的Webpack，尽管它只能对js文件打包，还缺少许多功能，但对于后续理解Webpack源码还是有一定的启发性，麻雀虽小，五脏俱全。</p>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>wepback</tag>
        <tag>手写webpack</tag>
      </tags>
  </entry>
</search>
