<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS常见手写题</title>
    <url>/2023/04/02/JS%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本文主要对JS中常见的API以及其内部实现原理重新实现一遍，知其根本才能灵活的使用它们。</p>
</blockquote>
<span id="more"></span>

<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="解析-URL-参数为对象"><a href="#解析-URL-参数为对象" class="headerlink" title="解析 URL 参数为对象"></a>解析 URL 参数为对象</h2><p>例如，<code>http://www.xxx.com?ids=123&amp;&amp;ids=456&amp;name=jack&amp;male</code>会被转化为<code>&#123; ids: [123, 456], name: &#39;jack&#39;, male: true &#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseParam</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paramsStr = <span class="regexp">/.+\?(.+)/</span>.<span class="title function_">exec</span>(url)[<span class="number">1</span>] <span class="comment">// 将 ? 后面的字符串取出来</span></span><br><span class="line">  <span class="keyword">const</span> paramsArr = paramsStr.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>) <span class="comment">// 将字符串以 &amp; 分割后存到数组中</span></span><br><span class="line">  <span class="keyword">const</span> paramsObj = &#123;&#125;</span><br><span class="line">  <span class="comment">// 将 params 存到对象中</span></span><br><span class="line">  paramsArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/=/</span>.<span class="title function_">test</span>(param)) &#123; <span class="comment">// 处理有 value 的参数</span></span><br><span class="line">      <span class="keyword">let</span> [key, val] = param.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>) <span class="comment">// 分割 key 和 value</span></span><br><span class="line">      val = <span class="built_in">decodeURIComponent</span>(val) <span class="comment">// 解码</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(val)) val = <span class="title class_">Number</span>(val) <span class="comment">// 判断是否转为数字</span></span><br><span class="line">      <span class="keyword">if</span> (paramsObj.<span class="title function_">hasOwnProperty</span>(key)) <span class="comment">// 如果对象有 key，则添加一个值</span></span><br><span class="line">        paramsObj[key] = [].<span class="title function_">concat</span>(paramsObj[key], val)</span><br><span class="line">      <span class="keyword">else</span> <span class="comment">// 如果对象没有这个 key，创建 key 并设置值</span></span><br><span class="line">        paramsObj[key] = val</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="comment">// 处理没有 value 的参数</span></span><br><span class="line">      paramsObj[param] = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> paramsObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写instanceof方法"><a href="#手写instanceof方法" class="headerlink" title="手写instanceof方法"></a>手写instanceof方法</h2><p>Instanceof 原理就是判断当前对象的隐式原型(<code>__proto__</code>)是否等于构造函数的原型(<code>prototype</code>)，若不是则顺着原型链查找，直到为<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, constructor</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(obj), prototype = constructor.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写new操作符"><a href="#手写new操作符" class="headerlink" title="手写new操作符"></a>手写new操作符</h2><p>new操作符的原理为：创建一个空对象，并把该对象的隐式原型指向构造函数的原型对象，然后执行构造函数并通过显示绑定改变构造函数里的this指向，从而为空对象添加属性，最后判断构造函数是否返回一个对象，若是则将其作为返回值，若没有则返回新建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">constructor, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">const</span> result = constructor.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">  <span class="keyword">if</span> (result !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> result</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写Promise-all"><a href="#手写Promise-all" class="headerlink" title="手写Promise.all"></a>手写Promise.all</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseAll</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="comment">// 先判断传入的参数是否为可迭代的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;argument must be an array&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        cnt++</span><br><span class="line">        result[index] = res</span><br><span class="line">        <span class="keyword">if</span> (cnt === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写防抖函数"><a href="#手写防抖函数" class="headerlink" title="手写防抖函数"></a>手写防抖函数</h2><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer)</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">let</span> callNow = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (immedaite) callNow = !timer</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">    &#125;, wait)</span><br><span class="line">    <span class="keyword">if</span> (callNow) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写节流函数"><a href="#手写节流函数" class="headerlink" title="手写节流函数"></a>手写节流函数</h2><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= delay) &#123;</span><br><span class="line">      pre = now</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写-call、apply、bind-函数"><a href="#手写-call、apply、bind-函数" class="headerlink" title="手写 call、apply、bind 函数"></a>手写 call、apply、bind 函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context=<span class="variable language_">window</span>, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context=<span class="variable language_">window</span>, args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (args &amp;&amp; !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not array&#x27;</span>)</span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">context, ...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not function&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fNOP</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fBound</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">		<span class="comment">// 判断是否被用作构造函数</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fBound ? <span class="variable language_">this</span> : context, args1.<span class="title function_">contact</span>(args2))</span><br><span class="line">  &#125;</span><br><span class="line">  fNop.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">  fBound.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = fBound</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现Ajax请求"><a href="#实现Ajax请求" class="headerlink" title="实现Ajax请求"></a>实现Ajax请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        <span class="comment">// 1. 新建一个HTTP对象</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 2. 设置状态监听函数 </span></span><br><span class="line">        <span class="comment">// (一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件)</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">            <span class="comment">// 3. 当请求成功或失败时，改变 promise 的状态</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">            <span class="keyword">else</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置错误监听函数</span></span><br><span class="line">        xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置响应的数据类型</span></span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">        <span class="comment">// 设置请求头信息</span></span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        <span class="comment">// 发送 HTTP 请求</span></span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现深浅拷贝"><a href="#实现深浅拷贝" class="headerlink" title="实现深浅拷贝"></a>实现深浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="title function_">hasOwnProperty</span>(key)) res[key] = value[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map 用来解决循环引用问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">value, map = <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;symbol&#x27;</span>) <span class="keyword">return</span> <span class="title class_">Symbol</span>(value.<span class="property">description</span>)</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span> || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>([...value])</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>([...value])</span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(value)) <span class="keyword">return</span> map.<span class="title function_">get</span>(value)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) ? [] : &#123;&#125;</span><br><span class="line">    map.<span class="title function_">set</span>(value, res)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="title function_">hasOwnProperty</span>(key))</span><br><span class="line">            res[key] = <span class="title function_">deepClone</span>(value[key], map)</span><br><span class="line">    <span class="comment">// Symbol key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> value.<span class="title function_">getOwnPropertySymbols</span>(value)) &#123;</span><br><span class="line">        res[key] = <span class="title function_">deepClone</span>(value[key], map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fNOP</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第2、3、8行可由 Child.prototype = Object.create(Parent.prototype) 替代</span></span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> prototype) &#123;</span><br><span class="line">        <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>[key] = prototype[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数自动柯理化"><a href="#函数自动柯理化" class="headerlink" title="函数自动柯理化"></a>函数自动柯理化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> argLen = fn.<span class="property">length</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &lt; argLen)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(args2))</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curried</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">currying</span>(add)</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h1 id="EventMitter"><a href="#EventMitter" class="headerlink" title="EventMitter"></a>EventMitter</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  private <span class="attr">_events</span>: <span class="title class_">Record</span>&lt;string, <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">evt: string, ...args: any[]</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fns = [...<span class="variable language_">this</span>.<span class="property">_events</span>[evt]];</span><br><span class="line">    fns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">evt: string, fn: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;The evet-triggered callback must be a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] = [fn];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">evt: string, fn: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">execFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(evt, execFn);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(evt, execFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">evt: string, fn?: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_events</span>[evt]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cb;</span><br><span class="line">    <span class="keyword">const</span> cbLen = <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbLen; i++) &#123;</span><br><span class="line">      cb = <span class="variable language_">this</span>.<span class="property">_events</span>[evt][i];</span><br><span class="line">      <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeAllListeners</span>(<span class="params">evt?: string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (evt) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span>[evt] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">_events</span>[evt].<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="数组的乱序输出"><a href="#数组的乱序输出" class="headerlink" title="数组的乱序输出"></a>数组的乱序输出</h2><p>主要的实现思路就是：</p>
<ul>
<li>取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。</li>
<li>第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换</li>
<li>按照上面的规律执行，直到遍历完成</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (n - i - <span class="number">1</span>) + i</span><br><span class="line">        [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据扁平化"><a href="#数据扁平化" class="headerlink" title="数据扁平化"></a>数据扁平化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])</span><br><span class="line">            res.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce 函数迭代</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatten</span>(cur) : cur)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 flat   arr.flat(Infinity)</span></span><br><span class="line"><span class="comment">// 正则和JSON方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr)</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    str = <span class="string">&#x27;[&#x27;</span> + str + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="列表转成树形结构"><a href="#列表转成树形结构" class="headerlink" title="列表转成树形结构"></a>列表转成树形结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换前：</span></span><br><span class="line">source = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;body&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;div&#x27;</span></span><br><span class="line">          &#125;]</span><br><span class="line"><span class="comment">// 转换为: </span></span><br><span class="line">tree = [&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">pid</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">          <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;div&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listToTree</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        map.<span class="title function_">set</span>(item.<span class="property">id</span>, item)</span><br><span class="line">    &#125;)</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">has</span>(item.<span class="property">pid</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> parent = map.<span class="title function_">get</span>(item.<span class="property">pid</span>)</span><br><span class="line">            (parent.<span class="property">children</span> || parent.<span class="property">children</span> = []).<span class="title function_">push</span>(item)</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树形结构转成列表"><a href="#树形结构转成列表" class="headerlink" title="树形结构转成列表"></a>树形结构转成列表</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treeToList</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    </span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">children</span> &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item.<span class="property">children</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">concat</span>(<span class="title function_">treeToList</span>(item.<span class="property">children</span>))</span><br><span class="line">            <span class="keyword">delete</span> item.<span class="property">children</span></span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字每千分位用逗号隔开"><a href="#数字每千分位用逗号隔开" class="headerlink" title="数字每千分位用逗号隔开"></a>数字每千分位用逗号隔开</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">format</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> str = num.<span class="title function_">toString</span>(), float = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        [str, float] = str.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=((\d&#123;3&#125;)+)$)/g</span>, <span class="string">&#x27;$1,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (float.<span class="property">length</span>) <span class="keyword">return</span> str + <span class="string">&#x27;.&#x27;</span> + float</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h1><h2 id="循环打印红黄绿"><a href="#循环打印红黄绿" class="headerlink" title="循环打印红黄绿"></a>循环打印红黄绿</h2><p><strong>红灯 3s 亮一次，绿灯 2s 亮一次，黄灯 1s 亮一次，交替重复</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params">timer, light</span>) =&gt; </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (light === <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">red</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (light === <span class="string">&#x27;green&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">green</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (light === <span class="string">&#x27;yellow&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">yellow</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, timer)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">step</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">task</span>(<span class="number">3000</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">task</span>(<span class="number">2000</span>, <span class="string">&#x27;green&#x27;</span>))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">task</span>(<span class="number">1000</span>, <span class="string">&#x27;yellow&#x27;</span>))</span><br><span class="line">        .<span class="title function_">then</span>(step)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">step</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">taskRunner</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">3000</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">2000</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">task</span>(<span class="number">1000</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    <span class="title function_">taskRunner</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">taskRunner</span>()</span><br></pre></td></tr></table></figure>

<h2 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">callback</span> = <span class="keyword">function</span>(<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">callback</span></span><br><span class="line">        &#125;</span><br><span class="line">        src += <span class="string">&#x27;callback=callback&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = src</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS手写</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3.2 响应式原理——手写简易版本</title>
    <url>/2023/03/25/Vue-3-2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在进行正式阅读Vue3.2 响应式源码前，先来了解响应式的核心原理，并自己实现一个基础的响应式数据系统</p>
</blockquote>
<span id="more"></span>

<h1 id="响应式数据前瞻"><a href="#响应式数据前瞻" class="headerlink" title="响应式数据前瞻"></a>响应式数据前瞻</h1><h2 id="不智能的数据"><a href="#不智能的数据" class="headerlink" title="不智能的数据"></a>不智能的数据</h2><p>我们正常编写js代码的时候，变量值的改变不会触发相关视图依赖更新，如下面代码所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reactive = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = reactive.<span class="property">a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">effect</span>()</span><br><span class="line">reactive.<span class="property">a</span> = <span class="string">&#x27;edited&#x27;</span> <span class="comment">// 变量修改，不会触发effect函数执行，需要手动调用</span></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 手动调用，更新视图</span></span><br></pre></td></tr></table></figure>
<h1 id="Vue中智能的数据"><a href="#Vue中智能的数据" class="headerlink" title="Vue中智能的数据"></a>Vue中智能的数据</h1><p>在Vue编写的数据，当数据变化时，相关的视图也会实时更新，官方称之为响应式数据，实现响应式数据的核心就是<strong>数据劫持</strong>和<strong>发布订阅</strong>。一句话概括就是通过劫持数据的获取（getter）操作来收集依赖，劫持数据的设置（setter）操作来触发依赖，其中收集依赖和触发依赖就是发布订阅模式的核心思想。</p>
<p>在Vue2中，数据劫持是通过<code>Object.defineProperty</code>来完成对象属性的获取（getter）和设置（setter）操作；Vue3则是通过<code>Proxy + Reflect</code>来完成对象属性相关劫持操作。下面可以使用<code>Proxy</code>来简单实现一个响应式数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前被激活的依赖</span></span><br><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  activeEffect = fn</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">fn</span>()</span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存依赖的对应关系 target -&gt; key -&gt; effect</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 当前没有被激活的依赖，直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 先获取 target 映射的依赖收集器</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  <span class="comment">// 再获取 key 映射的依赖，里面用于存放依赖</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!deps) depsMap.<span class="title function_">set</span>(key, (deps = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  <span class="keyword">if</span> (!deps.<span class="title function_">has</span>(activeEffect)) deps.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key, newValue, oldValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 值没变化直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (newValue === oldValue) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!deps) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> effects = [...deps]</span><br><span class="line">  effects.<span class="title function_">forEach</span>(<span class="function"><span class="params">effect</span> =&gt;</span> <span class="title function_">effect</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把普通对象变成响应式对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">originData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reactiveData = <span class="keyword">new</span> <span class="title class_">Proxy</span>(originData, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 收集当前激活的依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="comment">// 触发对应的依赖</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key, value, oldValue)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> reactiveData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个响应式对象</span></span><br><span class="line"><span class="keyword">const</span> originData = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;f1ower1ang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reactiveData = <span class="title function_">reactive</span>(originData)</span><br><span class="line"><span class="comment">// f1ower1ang-18</span></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;reactiveData.name&#125;</span>-<span class="subst">$&#123;reactiveData.age&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// edited-f1ower1ang-18</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  reactiveData.<span class="property">name</span> = <span class="string">&#x27;edited-f1ower1ang&#x27;</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>可以把上面的内容复制到浏览器控制台中运行一下，可以发现body元素起始内容为<code>f1ower1ang-18</code>，过了一秒后会自动更新为<code>edited-f1ower1ang-18</code>。这就是响应式数据的魅力所在，不需要我们修改完数据后手动操作去触发视图更新。</p>
<p>上述代码中，<code>WeakMap</code>和<code>Proxy</code>就是发布订阅模式的核心，其中<code>WeakMap</code>负责收集事件的订阅，<code>Proxy</code>中的getter和setter负责订阅事件和触发事件执行，这里的事件就是指传入effect中的函数参数，在Vue中则是和挂载组件以及组件更新相关的函数。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文从不具备响应式的数据作为切入点，到手写一个简单的响应式数据系统，为接下来的源码阅读打基础，下节则直接阅读源码，彻底掌握Vue3的响应式数据。</p>
]]></content>
      <categories>
        <category>Vue源码</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue源码</tag>
      </tags>
  </entry>
</search>
